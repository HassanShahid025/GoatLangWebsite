export const links = [
    {
      id: "1",
      title: "Variables",
      path: "/handbook/handbook-content/variables",
    },
    {
      id: "2",
      title: "Array",
      path: "/handbook/handbook-content/array",
    },
    {
      id: "3",
      title: "Object",
      path: "/handbook/handbook-content/objects",
    },
    {
      id: "4",
      title: "For Loop",
      path: "/handbook/handbook-content/forloop",
    },
    {
      id: "5",
      title: "While Loop",
      path: "/handbook/handbook-content/whileloop",
    },
    {
      id: "6",
      title: "If Else",
      path: "/handbook/handbook-content/ifelse",
    },
    {
      id: "7",
      title: "Switch Statement",
      path: "/handbook/handbook-content/switch",
    },
    {
      id: "8",
      title: "Function",
      path: "/handbook/handbook-content/function",
    },
    {
      id: "9",
      title: "Button 6",
      path: "/handbook/handbook-content/button6",
    },
  ];

  export const hanbookContent = [
    {
        id: "1",
        title: "Variables",
        path:'variables',
        content:{desc:"In Goatlang, variables serve as containers for storing and manipulating data. Let's unravel the basics of working with variables in this caprine-inspired language." ,
         h1:"Declaration and Initialization"},
        code : [
            {
              head:"Local Scope",  
              codeString:"a = 1",
                explanation:"Here, the variable a is limited to the local scope, accessible within its defined context."
            },
            {
              head:"Global Scope",
              codeString:"global const a = 1",
              explanation:"For global scope, use the global keyword before declaring the variable.By prefixing with global, you extend the variable's scope to the entire program, making it accessible from anywhere"
              
            },
            {
              head:"Constants",
              codeString:"const pi = 3.14 ",
              explanation:"Declare constants using the const keyword. Constants cannot be changed once assigned."
              
            },{
              head:"Data Types",
              codeString:"age = 3        //integer \nweight = 42.5  // float \nname = 'Billy' //string " ,
              explanation:"Declare constants using the const keyword. Constants cannot be changed once assigned."
              
            },
            {
              head:"Initialization",
              codeString:"goatCount = 5 " ,
              explanation:"Variables can be initialized at the time of declaration or later in the code."
              
            },
            {
              head:"Variable Naming",
              codeString:"1stPlace = 'Invalid'  // Incorrect naming \nfrom = 'Invalid'  //'from' is a reserved keyword" ,
              explanation:"* Do not start variable names with a number or special character.\n* Avoid using reserved keywords as variable names."
              
            }
            
        ]
    },
    {
        id: "2",
        title: "Array",
        path:'array',
        content:{desc:"Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.",
        h1:"GoatLang Array"},
        code : [
            {
                head:"Array Initialization",
                codeString:"arr = [1,2,3];",
                explanation:"To declare an array, specify the name of the array followed by using array literal to insert values in a comma-separated list, inside curly braces."
            },
            {
              head:"Access the Elements of an Array",
              codeString:"numbers = [1, 2, 3, 4, 5]; \nnumbers -> 0;",
              explanation:"This statement accesses the value of the first element in numbers. You can access elements by referring to the index number. Remember that array indexes in Goat Lang start with 0, with numbers->0 representing the first element."
            },
            {
              codeString:"numbers = [1, 2, 3, 4, 5]; \nnumbers -> (numbers.length-1);",
              explanation:"This statement accesses the value of the element one less than the length of array."
              
            },
            {
              head:"Modifying an Array",
              codeString:"numbers = [1, 2, 3, 4, 5]; \nnumbers -> 0 = 5;",
              explanation:"This statement accesses the value of the first element in numbers and modifies its value from initial value 1 to final value 5. The value at the first index is updated."
            },
        ]
    },
    {
    id: "3",
    title: "Objects",
    path: 'objects',
    content: {
        desc: "In Goatlang, objects allow you to group related data and functionality together. Let's explore the fundamentals of working with objects in this caprine-inspired language.",
        h1: "Object Declaration and Initialization"
    },
    code: [
        {
            head: "Creating Objects",
            codeString: "person = { name: 'Bob', age: 25, city: 'Caprineville' }",
            explanation: "Here, we create an object 'person' with properties like 'name', 'age', and 'city'. Each property is associated with a value."
        },
        {
            head: "Accessing Properties",
            codeString: "personName = person.name",
            explanation: "To access the 'name' property of the 'person' object, we use dot notation. 'personName' will be assigned the value 'Bob'."
        },
        {
            head: "Adding New Properties",
            codeString: "person.job = 'Goat Developer'",
            explanation: "You can dynamically add new properties to an existing object. Here, we add a 'job' property to the 'person' object."
        },
        {
            head: "Nested Objects",
            codeString: "address = { city: 'Caprineville', zip: '12345' }\nperson.address = address",
            explanation: "Objects can also contain other objects. Here, we create an 'address' object and nest it within the 'person' object."
        },
        {
            head: "Object Methods",
            codeString: "person.sayHello = function() { return 'Baa, hello!' }",
            explanation: "In GoatLang, objects can have methods (functions as properties). Here, 'sayHello' is a method of the 'person' object."
        },
        {
            head: "Object Destruction",
            codeString: "delete person.city",
            explanation: "To remove a property from an object, use the 'delete' keyword. This deletes the 'city' property from the 'person' object."
        }
    ]
}
,
    {
      id: "4",
      title: "For Loop",
      path:'forloop',
      content:{desc:"Loops can execute a block of code as long as a specified condition is reached.\nLoops are handy because they save time, reduce errors, and they make code more readable.",
      h1:"Goat Lang For Loop"},
      code : [
          {
              head:"Initialization",
              codeString:"i = 0; \t//Initialize the index variable",
              explanation:"In Goat Lang, before using a for loop it's essential to initialize the index variable. This is done outside the loop, typically before the loop structure."
          },
          {
            head:"Loop Structure",
            codeString:"for i from statement 1 to statement 2 by statement 3 { \n\t// Code to be executed in each iteration//  \n}",
            explanation:"Here, from 0 to 2 by 1 indicates that the loop will iterate from 0 to 2 (inclusive) with a step size of 1. You can adjust these parameters based on your specific requirements."
          },
          
          {
            head:"Loop Example 1",
            codeString:"i = 0; \t// Initialize the index variable \nfor i from 0 to 2 by 1 {\n\tdisplay(i); \n}",
            explanation:"In this example, the loop will print the values 0, 1, and 2, as it iterates over the specified range with a step size of 1."
          },
          {
            head:"Loop Example 2",
            codeString:"i = 0; \nfor i from 0 to 5 by 1 {\n\tdisplay(i); \n} \n// Outputs: 0, 1, 2, 3, 4, 5",
            explanation:"In this example, the loop will print the values 0, 1, and 2, as it iterates over the specified range with a step size of 1."
          },


      ]
  },
  {
      id: "5",
      title: "While Loop",
      path:'whileloop',
      content:{desc:"The `while` loop in Goatlang is used to repeatedly execute a block of code as long as a specified condition is true. Here's the basic syntax:"},
      code : [
          {
              codeString:"i = 0  // Initialize a variable \nuntil (i < 10) \n{ \ni = i + 1 \ndisplay(i) \n}",
              explanation:"In the provided syntax, initialize a loop control variable before the until keyword, and the loop will continue executing the enclosed code as long as the defined condition holds true. For instance, consider initializing a variable i to 0 and incrementing it until reaching 10. The until keyword signifies the beginning of the loop, and within the loop block, you can employ any valid Goatlang expressions. Be cautious to set a well-defined condition to prevent infinite loops. Utilize the while loop when you need to iteratively perform a task until a specific condition is satisfied. \nMake sure to update the loop condition appropriately for your specific use case. The loop will exit when the condition evaluates to false."
          }
      ]
  },
  {
    id: "6",
    title: "If Else",
    path:'ifelse',
    content:{desc:"The if-else statement in Goatlang enables conditional execution, allowing the program to follow different paths based on specified conditions. This construct enhances the flexibility of your code, making it responsive to varying scenarios \nWith if-else, you can create divergent code branches, executing specific blocks when conditions are met and alternate blocks when conditions are not satisfied. This facilitates decision-making within your Goatlang programs, providing a way to handle different cases dynamically. \nThe elf keyword extends this functionality by allowing the inclusion of multiple conditions, enhancing the language's capability to express complex decision trees. By using elf, you can streamline your code and improve its readability, making it easier to manage multiple scenarios within a single if-else structure. Explore the examples provided to understand how to effectively implement if-else and elf in your Goatlang programs"},
    code : [
        {
          head:"Syntax for basic if-else statement" , 
          codeString:"if (age > 18) \n{  \ndisplay('You are an adult.') \n} \nelse \n{ \ndisplay('You are a minor.') \n}",
          
        },
        {
          head:"Multiple conditions with ' elf ' keyword" , 
          codeString:"if (condition1) \n{  \n   //Code for Condition1 \n} \nelf (condition2) \n{ \n   // Code for condition2 \n} elf (condition3) \n{ \n   // Code for condition3 \n} else \n{ \n   // Code to execute when none of the conditions are true \n}",
          explanation:"This code snippet represents a versatile conditional structure in Goatlang. It begins with an initial 'if' condition (condition1), followed by alternative 'elf' conditions (condition2 and condition3), each with specific code blocks. The 'else' block contains code to execute when none of the preceding conditions are true. This construct allows for a multi-branch decision-making process, accommodating different scenarios based on the fulfillment of various conditions."
        },
        {
          head:"Nested if Statements",
          codeString:"if (age > 18) \n{ \n   display('You are an adult.') \n   if (income > 30000) \n   { \n      display('You have a higher income.') \n   } \n   else \n   { \n      display('You have a lower income.') \n   } \n} \nelse \n{ \n   display('You are a minor.') \n}",
          explanation:"Nested 'if' statements in Goatlang provide a way to evaluate multiple conditions in a hierarchical manner. Each 'if' statement inside another is known as a nested 'if,' and it allows for intricate decision-making"
        }
    ]
},
    
  ]
